#+TITLE: askai

Open a chatbot prompt (currently only works with Gemini) in Emacs.

* Installation

** Doom Emacs

1. Add this to ~packages.el~ (usually, =~/.doom.d/packages.el=; but you can always open the ~packages.el~ file using ~doom/find-file-in-private-config~, usually bound to ~SPC f p~):

   #+begin_src elisp
   (package! askai
      :recipe (:host github :repo "mpp112358/askai"))
   #+end_src

2. Run in a terminal:

   #+begin_src bash
   doom sync
   #+end_src

3. Restart Doom Emacs.

4. Configure /askai/ with the API key:

   Execute ~askai-set-google-api-key~ (~M-x askai-set-google-api-key RET~), write or yank your Google API key when asked for it, and press ENTER.

   Alternatively, you can manually edit the configuration file, ~config.json~, which is located in a folder called ~askai~ inside your user's Doom Emacs directory (typically, the path to the config file will be =~/.doom.d/askai/config.json=), and modify the value corresponding to the key ~api_key~. The result should be like this:

   #+begin_src json
   {
       "api_key": "your-google-api-key"
   }
   #+end_src

   You can find out your user's Emacs directory by inspecting the value of the variable ~doom-user-dir~ (~SPC h v doom-user-dir RET~).

** Non-Doom Emacs via ~package.el~

Currently, /askai/ can only be installed manually (it's not available in any package archives).

If you use a non-Doom Emacs, you can install /askai/ using package.el (which is the built-in Emacs package manager) following these steps:

1. Clone this repository in the appropriate location:

   #+begin_src bash
   git clone https://github.com/mpp112358/askai.git ~/.emacs.d/lisp/askai
   #+end_src

   Beware that your Emacs might use a different location for storing packages, and replace =~/.emacs.d/lisp/askai= with the appropriate path.

2. Add the package directory to ~load-path~, adding these lines to =~/.emacs= or =init.el=:

   #+begin_src elisp
   (add-to-list 'load-path "~/.emacs.d/lisp/askai")
   (require 'askai)
   #+end_src

   Again, replace =~/.emacs.d/lisp/askai= with the appropriate path for your Emacs installation.

3. Restart Emacs or evaluate the above lines.

4. Configure /askai/ with the API key:

   Execute ~askai-set-google-api-key~ (~M-x askai-set-google-api-key RET~), write or yank your Google API key when asked for it, and press ENTER.

   Alternatively, you can manually edit the configuration file, ~config.json~, which is located in a folder called ~askai~ inside your user's Emacs directory (typically, the path to the config file will be =~/.emacs.d/askai/config.json=), and modify the value corresponding to the key ~api_key~. The result should be like this:

   #+begin_src json
   {
       "api_key": "your-google-api-key"
   }
   #+end_src

   You can find out your user's Emacs directory by inspecting the value of the variable ~user-emacs-directory~ (~M-x describe-variable user-emacs-directory RET~).

** Non-Doom Emacs via ~straight.el~

If your Emacs uses ~straight.el~, you can install /askai/ following these steps:

1. Add /askai/ to the list of dependencies in =~/.emacs= of =init.el=, adding these lines to any of those files:

   #+begin_src elisp
   (straight-use-package
    '(askai :type git :host github :repo "mpp112358/askai"))
   #+end_src

2. Restart Emacs or evaluate the above lines.

3. Configure /askai/ with the API key:

   Execute ~askai-set-google-api-key~ (~M-x askai-set-google-api-key RET~), write or yank your Google API key when asked for it, and press ENTER.

   Alternatively, you can manually edit the configuration file, ~config.json~, which is located in a folder called ~askai~ inside your user's Emacs directory (typically, the path to the config file will be =~/.emacs.d/askai/config.json=), and modify the value corresponding to the key ~api_key~. The result should be like this:

   #+begin_src json
   {
       "api_key": "your-google-api-key"
   }
   #+end_src

   You can find out your user's Emacs directory by inspecting the value of the variable ~user-emacs-directory~ (~M-x describe-variable user-emacs-directory RET~).

* Usage

** Open a new chat

Run ~askai-run~ (~M-x askai-run RET~).

Write a prompt and press /Enter/, and wait until you get an answer.

The buffer in which you write the prompt is a normal Markdown buffer.

** Open a previous chat

Run ~askai-open-conversations-buffer~ (~M-x askai-open-conversations-buffer RET~) to see the list of stored chats.

To reopen and continue any of the stored chats, select it and press ~ENTER~.

To can still open a new chat from this buffer by pressing ~n~.

Chats are automatically saved when you close the chat buffer.

* Configuration

** Keybindings

You will probably like to add some keybindings for quick access to the tool.

*** Doom Emacs

Add this to your ~config.el~ file (usually, =~/.doom.d/config.el=; but you can always open the ~config.el~ file using ~doom/find-file-in-private-config~, usually bound to ~SPC f p~):

#+begin_src elisp
(map! :leader
      (:prefix ("a" . "askai")
       :desc "New chat" "a" #'askai-run
       :desc "Chats list" "c" #'askai-open-conversations-buffer))
#+end_src

Reload the configuration (~SPC h r r~).

Now, you will be able to open a new chat with ~SPC a a~, and to open the stored chats list with ~SPC a c~.


*** Vanilla Emacs

Add this to your ~/.emacs~ or ~/.emacs.d/init.el~ file:

#+begin_src elisp
(global-set-key (kbd "C-c a a") #'askai-run)
(global-set-key (kbd "C-c a c") #'askai-open-conversation-buffer)
#+end_src

** Google API key

To change the API key, execute ~askai-set-google-api-key~ (~M-x askai-set-google-api-key RET~), write or yank your Google API key when asked for it, and press ENTER.

Alternatively, you can manually edit the configuration file, ~config.json~, which is located in a folder called ~askai~ inside your user's Emacs directory (typically, the path to the config file will be =~/.emacs.d/askai/config.json=), and modify the value corresponding to the key ~api_key~. The result should be like this:

#+begin_src json
{
    "api_key": "your-google-api-key"
}
#+end_src

You can find out your user's Emacs directory by inspecting the value of the variable ~user-emacs-directory~ (~M-x describe-variable user-emacs-directory RET~).
